name: CI-Kong-Client2
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  KONNECT_API_TOKEN: ${{ secrets.KONNECT_API_TOKEN }}
  KONNECT_CONTROL_PLANE: ${{ vars.KONNECT_CONTROL_PLANE }}
  KONNECT_REGION: ${{ vars.KONNECT_REGION }}
jobs:
  Client2-Kong-Ingress-Controller:
    runs-on: self-hosted
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Gateway Manager : Kong Ingress Controller
      - name: Konnect | Client2 | Kong Ingress Controller | Route
        run: |
          kubectl apply -f 1-httpbinHttpRoute.yaml
      # Gateway Manager : Kong Ingress Controller
      - name: Konnect | Client2 | Kong Ingress Controller | Plugins
        run: |
          kubectl apply -f 2-plugin-rateLimiting.yaml
          kubectl apply -f 3-plugin-oidc-ory.yaml
  Client2-Kong-DevPortal:
    needs: [Client2-Kong-Ingress-Controller]
    runs-on: self-hosted
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Dev Portal
      - name: Konnect | Client2 | Deploy API Product and Publish it in the Dev Portal
        run: | 
          #Begin
          echo "::group::Create API product 'Client2-MyHttpbin-CICD'"
          productId=$(http --ignore-stdin --raw '{"name":"Client2-MyHttpbin-CICD", "description":"A simple REST API service based on https://httpbin.apim.eu"}' POST https://$KONNECT_REGION.api.konghq.com/v2/api-products Authorization:"Bearer $KONNECT_API_TOKEN"  | jq -r '.id')
          echo 'productId='$productId
          portalId=$(http --ignore-stdin https://$KONNECT_REGION.api.konghq.com/konnect-api/api/portals Authorization:"Bearer $KONNECT_API_TOKEN" | jq -r '.data[0].id')
          echo 'portalId='$portalId
          controlPlane=$(http --ignore-stdin https://$KONNECT_REGION.api.konghq.com/v2/runtime-groups Authorization:"Bearer $KONNECT_API_TOKEN" | jq -r --arg control_plane "$KONNECT_CONTROL_PLANE" '.data[] | select(.name == $ARGS.named.control_plane) | .id')
          echo 'controlPlane='$controlPlane
          serviceId=$(http --ignore-stdin https://$KONNECT_REGION.api.konghq.com/v2/runtime-groups/$controlPlane/core-entities/services  Authorization:"Bearer $KONNECT_API_TOKEN" | jq -r '.data[] | select(.name | test("^httproute.client2.httpbin-route-cicd") ) | .id')
          echo 'serviceId='$serviceId
          versionId=$(http --ignore-stdin \
            --raw '{"name":"v1", "publish_status":"published", "gateway_service": {"runtime_group_id":"'$controlPlane'", "id":"'$serviceId'"}}' \
            POST https://$KONNECT_REGION.api.konghq.com/v2/api-products/$productId/product-versions Authorization:"Bearer $KONNECT_API_TOKEN" | jq -r '.id')
          echo 'versionId='$versionId
          echo "::endgroup::"
          
          echo "::group::Push 'Client2-MyHttpbin-CICD' specification'"
          spec=$(base64 -i myhttpbin.json)
          specificationId=$(http --ignore-stdin \
            --raw '{"name":"myhttpbin.json", "content":"'$spec'"}' \
              POST https://$KONNECT_REGION.api.konghq.com/v2/api-products/$productId/product-versions/$versionId/specifications  Authorization:"Bearer $KONNECT_API_TOKEN" | jq -r '.id')
          echo 'specificationId='$specificationId
          if [ "$specificationId" = "null" ]; then
            echo "Unable to push the JSON/YAML specifiation"
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::Publish API product 'Client2-MyHttpbin-CICD'"
          publicationId=$(http --ignore-stdin \
            --raw '{"portal_ids": ["'$portalId'"]}'\
            PATCH https://$KONNECT_REGION.api.konghq.com/v2/api-products/$productId  Authorization:"Bearer $KONNECT_API_TOKEN" | jq -r '.id')
          echo 'publicationId='$publicationId
          if [ "$publicationId" = "null" ]; then
            echo "Unable to publish the API product"
            exit 1
          fi
          echo "::endgroup::"
